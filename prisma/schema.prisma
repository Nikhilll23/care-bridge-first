// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  username  String    @unique
  password  String
  role      String    @default("USER")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  sessions  Session[]
  accounts  Account[]
}

model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  accessToken  String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Patient {
  id           Int           @id @default(autoincrement())
  firstName    String
  lastName     String
  age          Int?
  email        String        @unique
  phone        String?
  dateOfBirth  DateTime?
  gender       String?
  address      String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  appointments Appointment[] // Relation to Appointment model
}

model Appointment {
  id           Int      @id @default(autoincrement())
  patientId    Int // Foreign key to Patient
  date         DateTime // Date of the appointment
  time         DateTime // Time of the appointment
  status       String // e.g., "scheduled", "completed", "canceled"
  givenBy      String? // Name of the doctor who gave the appointment
  prescription String? // Prescription details provided by the doctor
  review       String? // Review or notes from the doctor about the appointment
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  patient Patient @relation(fields: [patientId], references: [id]) // Relation to Patient model
}
