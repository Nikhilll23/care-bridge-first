// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  username  String    @unique
  password  String
  role      String    @default("USER")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}


model Patient {
  id           Int           @id @default(autoincrement())
  firstName    String
  lastName     String
  age          Int?
  email        String        @unique
  phone        String?
  dateOfBirth  DateTime?
  gender       String?
  address      String?
  bloodGroup   String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  appointments Appointment[] 
}

model Appointment {
  id              Int          @id @default(autoincrement())
  patientId       Int
  doctorId        Int
  date            DateTime
  time            DateTime
  status          String       // scheduled, completed, canceled
  type            String       // regular, followup, emergency
  duration        Int    
  bloodPressure   String?
  heartRate       String?
  Tempreture      String?
  O2Saturation    String?   // in minutes
  symptoms        String?      // Patient's symptoms
  diagnosis       String?      // Doctor's diagnosis
  prescription    String?      // Prescribed medications(Px)
  notes           String?      // Additional notes
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  canceledReason  String?
  
  patient         Patient      @relation(fields: [patientId], references: [id])
  doctor          Doctor       @relation(fields: [doctorId], references: [id])
}

model Doctor {
  id              Int           @id @default(autoincrement())
  firstName       String
  lastName        String
  email           String        @unique
  phone           String?
  specialization  String        // e.g., Cardiology, Neurology
  qualification   String        // e.g., MBBS, MD
  experience      Int?          // Years of experience
  designation     String        // e.g., Senior Consultant
  department      String
  consultationFee Decimal       @db.Decimal(10, 2)
  isAvailable     Boolean       @default(true)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  appointments    Appointment[]
}